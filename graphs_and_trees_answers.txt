1. What is a binary tree and what makes it unique to other trees?

A binary tree is a tree data structure where each node has only up to two children, left and right, with the increasing order on the right and the decreasing order on the left. This is actually its binary children type that makes it unique. 


2. What is a heuristic?

Heuristic could be defined as the fact of guessing what an algorithm would do to solve a problem instead of going into straight action and calculations. 


3. What is another problem besides the shortest-path problem that requires the use of heuristics? 

A game of chess would require the use of heuristics. 


4. What is the difference between a depth-first search and a breadth-first search?

A depth-first goes from top to bottom while a bread-first goes from the left to the right. 


5. Explain in your own words what an undirected, a-cyclic, unweighted graph is.

- An undirected graph contains a set of nodes that are connected together, where all of them are bidirectional. This is not limited to a single direction. 

- An a-cyclic graph is basically the opposite of following a cycle. This means that once you have pass a node, you cannot go back to it. 

- An unweighted graph has simply no value assigned to its nodes. 


Programming Questions

class Node {
  constructor (value){
    this.value = value; 
    this.left = null;
    this.right = null;
  }
}

class BinarySearchTree {
  constructor () {
    this.root = null; 
  }
  insert(value){
    var newNode = new Node(value);
    if(this.root === null){
      this.root = newNode;
      return this; 
    } else {
      var current = this.root; 
      while(true){
        if(value === current.value) return undefined; 
        if(value < current.value){
          if(current.left === null){
            current.left = newNode; 
            return this; 
          } else {
            current = current.left;
          } 
        } else if (value > current.value){
            if(current.right === null){
              current.right = newNode; 
              return this; 
            } else {
              current = current.right; 
            }
          }
        } 
      }
    }
  contains(value){
    if(this.root === null) return false; 
    var current = this.root,
        found = false;
    while(current && !found){
        if(value < current.value){
          current = current.left;
        } else if(value > current.value){
          current = current.right;
        } else {
          return true; 
        }
    }
    return false;
  }
}

var tree = new BinarySearchTree();
tree.insert(10);
tree.insert(5);
tree.insert(13);
tree.insert(11);
tree.insert(2);
tree.insert(16);
tree.insert(7);
console.log(tree.root.right);
console.log(tree.contains(5));
console.log(tree.contains(7));
console.log(tree.contains(100));


2. Given a Binary Search Tree and two nodes, n1 and n2, write a function that finds the distance between the two nodes.

class Node {
  constructor(key) {
    this.key =  key;
    this.left = null;
    this.right = null;
  }
}
 

function findPath(root, path, k) {
  if (!root) {
    return false;
  }
  path.push(root.key)
  if (root.key == k) {
    return true;
  }
  if (root.left && findPath(root.left, path, k) || root.right && findPath(root.right, path, k)) {
    return true;
  }
  path.pop();
  return false;
}
 
function findLCA(root, n1, n2) {
  let n1Path = [];
  let n2Path = [];
  if (!findPath(root, n1Path, n1) || !findPath(root, n2Path, n2)) {
    return -1;
  }
  
  console.log(n1Path, n2Path);
  let i = 0;
  while(i < n1Path.length && i < n2Path.length) {
  if (n1Path[i] != n2Path[i]) {
      break;
    }
    i += 1;
  }

  return n1Path[i-1];
}


root = new Node(1);
root.left = new Node(2);
root.right = new Node(3);
root.left.left = new Node(4);
root.left.right = new Node(5);
root.right.left = new Node(6);
root.right.right = new Node(7);
 
console.log("LCA(4, 5)", findLCA(root, 5, 7));
//console.log("LCA(4, 6)", findLCA(root, 4, 6));
//console.log("LCA(3, 4)", findLCA(root,3,4));
//console.log("LCA(2, 4)", findLCA(root,2, 4));

