1- In your own words, explain what clean code is and why it is important.

Clean code is the fact to write a code easy to read and to maintain, whether it is for us or for other developers in the future. This is all about producing an efficient code. 


2- Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.

Let's imagine you own an Alexa Dot. You are not expecting and probably hasn't think of it but its code is actually miswritten. As you may know that devices keeps listening to its surrounding environment. As it is miswritten, it could sometimes answer to your own discussions or to the television. It could also record your conversation and send it to random contact. 
If this was the case, it could affect your life, not as much as the Toyota case, but affects you in a way that you'd felt like your privacy was violated.


3- Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

In my opinion the code could be improved as 'PRINT z' seems overused. Furthermore despite explanations seem like a good idea, there's also here an overuse, especially that pseudocode is made to be understood by simple reading. We could refactor it as follows, 

FUNCTION do(x, y)               
 IF y = "F" THEN               
 SET z to (xâˆ’32) * (5/9)                           
 ELSE IF y = "C" THEN          
 SET z to x * 1.8000 + 32.00   
 PRINT z                       
 END IF
END FUNCTION


4- Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

I would consider this code as being clean as it is simply written and simple to understand. 

Original code: 
FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION

5.a- Here is my refactored pseudocode: 

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)
   IF paymentType = 'CASH' THEN
     CALL paymentCash
   ELSE paymentType= 'CREDIT CARD' THEN     
     CALL paymentCard 
   END IF
END FUNCTION


FUNCTION paymentCash
	PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
END FUNCTION

FUNCTION paymentCard
	PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
END FUNCTION


b- Here is my refactored pseudocode: 

FUNCTION checkoutBook(book, guest) 
     IF NOT(guest.hasOverdueBooks) AND IF guest.accountActive AND IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION


C- Here is my refactored pseudocode: 
CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION
END CLASS

CLASS Withdraw
 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
 END FUNCTION
END CLASS

CLASS Offer
 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
 END FUNCTION
END CLASS

CLASS Status
 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
 END FUNCTION
END CLASS

6- Square Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.

function getSum(total, num) {
  return total + num;
}

var numbers = [13, 13];

var number = numbers.reduce(getSum);

function squareroot(number) {
    for (var i = 0; i * i <= number; i++) {
        if (i * i === number)
            return i;
   }
  return number; {
    if (i * i !== number)
      return i + i;
  }
}
console.log(squareroot(number));


7. Duplicate Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.

function foo(a, b){
    for(var i=0;i<a.length;i++){
      if (a[i] === b) 
        return true;
    }
 return false;
}

console.log(foo([2, 4, 7], 7));
console.log(foo([2, 4, 5], 7));

8. Anagram An anagram is a word, phrase, or name formed by rearranging the letters of another word. For example, spar can be formed from rasp. Given two strings, stringOne and stringTwo, determine if stringOne is an anagram of stringTwo. Assume that the strings contain only lowercase letters and do not worry about case-sensitivity. Hint: Your first task will be to convert the strings to arrays.

function isAnagram (str1, str2) {

    if (str1.length !== str2.length) {
        return false;
    }
    
    var sortStr1 = str1.split('').sort().join('');
    var sortStr2 = str2.split('').sort().join('');

    return (sortStr1 === sortStr2);
}

console.log(isAnagram('dog','god'));

